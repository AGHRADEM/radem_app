volumes:
  radem_data:
    driver: local
  grafana_data:
    driver: local

networks:
  radem_network:
    driver: bridge

services:
  radem_influxdb:
    # Service with the InfluxDB database.
    image: influxdb:alpine
    container_name: influxdb_dev
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${DOCKER_INFLUXDB_INIT_USERNAME}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${DOCKER_INFLUXDB_INIT_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${DOCKER_INFLUXDB_INIT_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: ${DOCKER_INFLUXDB_INIT_BUCKET}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
    volumes:
      - radem_data:/radem_data
    networks:
      - radem_network
    ports:
      - "8186:8086"
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"

  radem_app:
    # Service fetching, processing and publishing the data to the database/
    #  
    # Description:
    # * periodically fetch data available on external locations (cron job)
    #   * RADEM data (FTP connection)
    #   * IREM data (publicly available)
    # * store the data in DATA_DIR, which is shared with other containers
    # * process the data
    # * publish the data to the InfluxDB database
    build:
      context: ./app
    container_name: app_dev
    environment:
      - DATA_DIR=/radem_data
      - FTP_USER=${FTP_USER}
      - FTP_PASSWORD=${FTP_PASSWORD}
      - FTP_URL=${FTP_URL}
      - INFLUXDB_TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
      - INFLUXDB_ORG=${DOCKER_INFLUXDB_INIT_ORG}
      - INFLUXDB_BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET}
      - INFLUXDB_IREM_BUCKET=${DOCKER_INFLUXDB_INIT_IREM_BUCKET}
      - INFLUXDB_URL=http://radem_influxdb:8086
      - KERNELS_DIR=/radem_data/spice
      - KERNELS_MK=5.1 150lb_23_1
      - KERNELS_VERSION=v451
    volumes:
      - radem_data:/radem_data
      - ./app/scripts:/app/scripts
      - ./app/app_job:/etc/cron.d/app_job
    networks:
      - radem_network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"

  radem_grafana:
    # Service with the Grafana dashboard.
    image: grafana/grafana-oss
    container_name: grafana_dev
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
      URL_GRAFANA: http://radem_grafana:3000
      URL_INFLUXDB: http://radem_influxdb:8086
      URL_PROMETHEUS: http://radem_prometheus:9090
      INFLUXDB_TOKEN: ${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
      INFLUXDB_PASSWORD: ${DOCKER_INFLUXDB_INIT_PASSWORD}
      INFLUXDB_ORG: ${DOCKER_INFLUXDB_INIT_ORG}
      INFLUXDB_BUCKET: ${DOCKER_INFLUXDB_INIT_BUCKET}
      INFLUXDB_IREM_BUCKET: ${DOCKER_INFLUXDB_INIT_IREM_BUCKET}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/etc/grafana/dashboards
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    networks:
      - radem_network
    ports:
      - "81:3000"
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"

  radem_grafana_init_users:
    # Service to initialize Grafana users.
    image: curlimages/curl:latest
    depends_on:
      - radem_grafana
    volumes:
      - ./grafana/scripts/init_users.sh:/init_users.sh
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      GF_VIEWER_LOGIN: ${GF_VIEWER_LOGIN}
      GF_VIEWER_PASSWORD: ${GF_VIEWER_PASSWORD}
    entrypoint: [ "/bin/sh", "/init_users.sh" ]
    networks:
      - radem_network

  radem_prometheus:
    image: prom/prometheus:latest
    container_name: prometheus_dev
    ports:
      - 9090:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - radem_cadvisor
      - radem_node_exporter
    networks:
      - radem_network
    restart: unless-stopped

  radem_cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor_dev
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - radem_network
    restart: unless-stopped

  radem_node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter_dev
    command:
      - '--path.rootfs=/host'
    networks:
      - radem_network
    ports:
      - 9100:9100
    pid: host
    volumes:
      - '/:/host:ro,rslave'
    restart: unless-stopped
